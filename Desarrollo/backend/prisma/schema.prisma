// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CursoCapacitacion {
  id_curso          Int             @id @default(autoincrement())
  nombre_curso      String
  descripcion_curso String
  fecha_creacion    DateTime
  fecha_limite      DateTime?
  estado_curso      Boolean
  modulos           Modulo[]
  cursoAsignados    CursoAsignado[]
}

model Modulo {
  id_modulo          Int               @id @default(autoincrement())
  nombre_modulo      String
  descripcion_modulo String
  cursoId            Int
  curso              CursoCapacitacion @relation(fields: [cursoId], references: [id_curso])
  lecciones          LeccionCurso[]
}

model LeccionCurso {
  id_leccion                Int                    @id @default(autoincrement())
  nombre_leccion            String
  descripcion_leccion       String
  fecha_de_creacion_leccion DateTime
  moduloId                  Int
  modulo                    Modulo                 @relation(fields: [moduloId], references: [id_modulo])
  contenidos                Contenido[]
  Cumplimiento_leccion      Cumplimiento_leccion[]
}

model Contenido {
  id_contenido   Int          @id @default(autoincrement())
  archivo        String
  url            String?
  tipo_contenido String
  leccionId      Int
  leccion        LeccionCurso @relation(fields: [leccionId], references: [id_leccion])
}

model Usuario {
  rut                    String                 @id
  nombre                 String
  apellido_paterno       String
  apellido_materno       String
  correo                 String                 @unique
  rolId                  Int
  areaId                 Int?
  refreshToken           String?  // Nuevo campo para almacenar el refresh token
  rol                    Rol                    @relation(fields: [rolId], references: [id_rol])
  Area                   Area?                  @relation(fields: [areaId], references: [id_area])
  encuestasAsignadas     EncuestaAsignada[]
  respuestas             Respuesta[]
  cursoAsignados         CursoAsignado[]
  cumplimiento_lecciones Cumplimiento_leccion[]

}

model CursoAsignado {
  fecha_asignacion DateTime
  fecha_acceso     DateTime?
  cursoId          Int
  usuarioId        String
  curso            CursoCapacitacion @relation(fields: [cursoId], references: [id_curso])
  usuario          Usuario           @relation(fields: [usuarioId], references: [rut])

  @@id([cursoId, usuarioId])
}

model Cumplimiento_leccion {
  usuarioId                 String
  fecha_modificacion_estado DateTime?
  estado                    Boolean
  usuario                   Usuario      @relation(fields: [usuarioId], references: [rut])
  leccionId                 Int
  leccion                   LeccionCurso @relation(fields: [leccionId], references: [id_leccion])

  @@id([usuarioId, leccionId])
}

model Area {
  id_area     Int       @id @default(autoincrement())
  nombre_area String
  usuarios    Usuario[]
}

model Rol {
  id_rol     Int       @id @default(autoincrement())
  nombre_rol String
  usuarios   Usuario[]
}

model Encuesta {
  id_encuesta        Int                @id @default(autoincrement())
  titulo             String
  fecha_creacion     DateTime
  estado_encuesta    String
  preguntas          Pregunta[]
  encuestasAsignadas EncuestaAsignada[]
}

model EncuestaAsignada {
  id_asignacion    Int      @id @default(autoincrement())
  estado           String
  fecha_asignacion DateTime
  encuestaId       Int
  usuarioId        String
  encuesta         Encuesta @relation(fields: [encuestaId], references: [id_encuesta])
  usuario          Usuario  @relation(fields: [usuarioId], references: [rut])
}

model Pregunta {
  id_pregunta    Int               @id @default(autoincrement())
  texto_pregunta String
  tipo_respuesta String
  encuestaId     Int
  encuesta       Encuesta          @relation(fields: [encuestaId], references: [id_encuesta])
  opciones       OpcionRespuesta[]
  respuestas     Respuesta[]
}

model OpcionRespuesta {
  id_opcion    Int         @id @default(autoincrement())
  texto_opcion String
  preguntaId   Int
  pregunta     Pregunta    @relation(fields: [preguntaId], references: [id_pregunta])
  Respuesta    Respuesta[]
}

model Respuesta {
  texto_respuesta     String?
  fecha_respuesta     DateTime
  usuarioId           String
  usuario             Usuario         @relation(fields: [usuarioId], references: [rut])
  opcionId            Int
  opcion              OpcionRespuesta @relation(fields: [opcionId], references: [id_opcion])
  Pregunta            Pregunta      @relation(fields: [preguntaId_pregunta], references: [id_pregunta])
  preguntaId_pregunta Int

  @@id([usuarioId, opcionId])
}
